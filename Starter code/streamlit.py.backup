import os
import json
import streamlit as st
import helper_functions
from PIL import Image
from web3 import Web3
from web3.gas_strategies.time_based import medium_gas_price_strategy
from web3 import Web3
from pathlib import Path
import dotenv

#dotenv_file = dotenv.find_dotenv()                                                                                                     
dotenv.load_dotenv('.env') 
#st.write(dotenv_file)
### Load Blackjack Contract

w3 = Web3(Web3.HTTPProvider('HTTP://127.0.0.1:7545/'))
contract_address = os.getenv('CURRENT_CONTRACT_ADDRESS')
st.write(contract_address)

def load_contract():
    with open('blackjack_abi.json') as f:
        contract_abi = json.load(f)
        contract = w3.eth.contract(
        address=contract_address,
        abi=contract_abi,
    )
    return contract

contract = load_contract()
accounts = w3.eth.accounts

def get_contract_variables():
    bet_min = contract.functions.BET_MIN().call()
    bet_max = contract.functions.BET_MAX().call()
    house_balance = contract.functions.houseBalance().call()
    player_balance = contract.functions.playerBalance().call()
    
    bet_amount = contract.functions.betAmount().call()

    game_in_progress = contract.functions.gameInProgress().call()
    dealer_card_count = contract.functions.dealerCardCount().call()
    player_card_count = contract.functions.playerCardCount().call()
    
    player_busted = contract.functions.playerBusted().call()
    dealer_busted =  contract.functions.dealerBusted().call()
    
    player_stands = contract.functions.playerStands().call()
    dealer_stands =  contract.functions.dealerStands().call()
    
    final_player_count = contract.functions.finalPlayerCount().call()
    final_dealer_count =  contract.functions.finalDealerCount().call()
    


    
    return bet_min,\
           bet_max,\
           house_balance,\
           player_balance,\
           bet_amount,\
           game_in_progress,\
           dealer_card_count,\
           player_card_count,\
           player_busted,\
           dealer_busted,\
           player_stands,\
           dealer_stands,\
           final_player_count,\
           final_dealer_count



def reset_contract():
    contract.functions.reset_contract().transact({'from': w3.eth.accounts[1], 'gasPrice': w3.eth.gas_price,})
def register_player(player):
    contract.functions.register().transact({'from': w3.eth.accounts[player], 'value': 10000000000000000000, 'gasPrice': w3.eth.gas_price,})
def player_choice(player, choice):
    contract.functions.playerChooses(choice).transact({'from': w3.eth.accounts[player], 'gasPrice' : w3.eth.gas_price,})
def get_outcome(player):
    contract.functions.getOutcome().transact({'from': w3.eth.accounts[player], 'gasPrice': w3.eth.gas_price,})


#print(contract_address)
contract_variables = get_contract_variables()
st.write(contract_variables)

with st.sidebar:

    st.write('test')

    col1, col2, col3, col4, col5 = st.columns(5)

    with col1:
        pass 
    with col2:
        if st.button('Settings'):
            print('test')
        
        st.write('')

        if st.button('Coinflip'):
            print('test')
        if st.button('BlackJack'):
            print('test')
    with col3:
        pass 


    player_account = st.selectbox('Please Select Player Account', (accounts))
    fund_amount = st.number_input('Select Amount To Fund')

card_size = 3
width_multiplier = 25
height_multiplier = 35

first_card_path = helper_functions.get_card_image_string(5,1)
second_card_path = helper_functions.get_card_image_string(12,2)

st.write(first_card_path)

first_card_image = Image.open(first_card_path)
first_card_image = first_card_image.resize(((card_size * width_multiplier), (card_size * height_multiplier)))
second_card_image = Image.open(second_card_path)
second_card_image = second_card_image.resize(((card_size * width_multiplier), (card_size * height_multiplier)))

card_back = Image.open('images/Cards/Back.png')
card_back = card_back.resize(((card_size * width_multiplier), (card_size * height_multiplier)))


col1, col2, col3, col4, col5, col6 = st.columns(6)
col3.image(first_card_image)
col4.image(second_card_image)
